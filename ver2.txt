
import base64

encoded_script = '''from sys import platform
import os
import sys
import platform
import requests
import json as jsond
import time
from colorama import Fore, Style, init
import hashlib
from datetime import datetime, timedelta
from discord_interactions import verify_key
import platform
import json
import statistics
import subprocess
from datetime import datetime, timedelta
import pytz
import random

autolog = False
license_file_path = "/data/data/com.termux/files/home/.license.txt"
if platform.system() == "Linux":
    if os.path.exists(license_file_path):
        with open(license_file_path, "r") as file:
            license = file.read()
            if not license == None:
                autolog = True
    else:
        autolog = False
else:
    gpath = os.getenv('APPDATA')
    lpath = os.path.join(gpath, 'license.txt')
    if os.path.exists(lpath):
        with open(lpath, "r") as file:
            license = file.read()
            if not license == None:
                autolog = True

init(autoreset=True)
BANNERh = fr"""
{Fore.RED}
___  ___          _
|  \/  |         | |
| .  . |_____ __ | | __ _ _   _
| |\/| |_  / '_ \| |/ _` | | | |
| |  | |/ /| |_) | | (_| | |_| |
\_|  |_/___| .__/|_|\__,_|\__, |
           | |             __/ |
           |_|            |___/
Made by TLG ï¼š @lucas8166363 {Fore.RESET}

"""
ver = "#1.0"
timezone = 'Asia/Kuala_Lumpur'
onemin = True
win = 0
lose = 0
firsttime = True
test = None
print(BANNERh)

user_input = input(f"Do you want to use 30s? current mode is 60s [Y/N]")
if user_input.lower() == "y":
    onemin = False

if onemin == True:
    data = {"pageSize":10,"pageNo":1,"typeId":1,"language":0,"random":"ab914e8fb85b4982bc8597bae4d2957e","signature":"9D021D1E641106DD2340C93B510AF34B","timestamp":1734222242}
    timesd = 60

else:
    data = {"pageSize": 10,"pageNo": 1,"typeId": 30,"language": 0,"random": "6a222fba72804178a73b14ea3608f882","signature": "0AC1D24B772F82131E80F8F812F6647E","timestamp": 1734184938}
    timesd = 30

# keyauth initialization
class api:
    name = ownerid = version = hash_to_check = ""

    def __init__(self, name, ownerid, version, hash_to_check):
        if len(ownerid) != 10:
            print("Visit https://keyauth.cc/app/, copy Python code, and replace code in main.py with that")
            time.sleep(3)
            os._exit(1)

        self.name = name
        self.ownerid = ownerid
        self.version = version
        self.hash_to_check = hash_to_check
        self.init()

    sessionid = enckey = ""
    initialized = False

    def init(self):
        if self.sessionid != "":
            print("You've already initialized!")
            time.sleep(3)
            os._exit(1)

        post_data = {
            "type": "init",
            "ver": self.version,
            "hash": self.hash_to_check,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        if response == "KeyAuth_Invalid":
            print("The application doesn't exist")
            time.sleep(3)
            os._exit(1)

        json = jsond.loads(response)

        if json["message"] == "invalidver":
            if json["download"] != "":
                print("New Version Available")
                download_link = json["download"]
                os.system(f"start {download_link}")
                time.sleep(3)
                os._exit(1)
            else:
                print("Invalid Version, Contact owner to add download link to latest app version")
                time.sleep(3)
                os._exit(1)

        if not json["success"]:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

        self.sessionid = json["sessionid"]
        self.initialized = True


    def __load_user_data(self, data):
        self.user_data.username = data["username"]
        self.user_data.ip = data["ip"]
        self.user_data.hwid = data["hwid"] or "N/A"
        self.user_data.expires = data["subscriptions"][0]["expiry"]
        self.user_data.createdate = data["createdate"]
        self.user_data.lastlogin = data["lastlogin"]
        self.user_data.subscription = data["subscriptions"][0]["subscription"]
        self.user_data.subscriptions = data["subscriptions"]

    class application_data_class:
        numUsers = numKeys = app_ver = customer_panel = onlineUsers = ""

    class user_data_class:
        username = ip = hwid = expires = createdate = lastlogin = subscription = subscriptions = ""

    user_data = user_data_class()
    app_data = application_data_class()

    def __load_app_data(self, data):
        self.app_data.onlineUsers = data["numOnlineUsers"]

    def __do_request(self, post_data):
        try:
            response = requests.post(
            "https://keyauth.win/api/1.3/", data=post_data, timeout=10
            )

            if post_data["type"] == "log" or post_data["type"] == "file":
                return response.text

            # Get the signature and timestamp from the headers
            signature = response.headers.get("x-signature-ed25519")
            timestamp = response.headers.get("x-signature-timestamp")

            if not signature or not timestamp:
                print("Missing headers for signature verification.")
                time.sleep(3)
                os._exit(1)

            server_time = datetime.utcfromtimestamp(int(timestamp))
            current_time = datetime.utcnow()

            buffer_seconds = 5
            time_difference = current_time - server_time

            if time_difference > timedelta(seconds=20 + buffer_seconds):
                print("Timestamp is too old (exceeded 20 seconds + buffer).")
                time.sleep(3)
                os._exit(1)

            # Proceed with creating debug folders and logging##################might error

            if not verify_key(response.text.encode('utf-8'), signature, timestamp, '5586b4bc69c7a4b487e4563a4cd96afd39140f919bd31cea7d1c6a1e8439422b'):
                print("Signature checksum failed. Request was tampered with or session ended most likely.")
                print("Response: " + response.text)
                time.sleep(3)
                os._exit(1)

            return response.text

        except requests.exceptions.Timeout:
            print("Request timed out. Server is probably down/slow at the moment")

    def license(self, key, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()

        post_data = {
            "type": "license",
            "key": key,
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            self.__load_user_data(json["info"])
            print(json["message"])
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def checkinit(self):
        if not self.initialized:
            print("Initialize first, in order to use the functions")
            time.sleep(3)
            os._exit(1)
            
            
def generate_random_uuid():
    return ''.join(random.choices('0123456789abcdef', k=32))

class others:
    @staticmethod
    def get_hwid():
        if platform.system() == "Linux":
            file_path = "/data/data/com.termux/files/home/.md"

            if os.path.exists(file_path):
                if os.stat(file_path).st_size == 0:
                    hwid = generate_random_uuid()
                    with open(file_path, 'w') as f:
                        f.write(hwid)
                else:
                    with open(file_path, 'r') as f:
                        hwid = f.read().strip()
            else:
                hwid = generate_random_uuid()
                with open(file_path, 'w') as f:
                    f.write(hwid)

            if not os.access(__file__, os.W_OK):
                os.system(f"chmod +x {__file__}")
            if hwid is None:
                print("Error occurred, exiting...")
                sys.exit()

            return hwid

        elif platform.system() == "Windows":
            sys.exit()

        elif platform.system() == "Darwin":
            output = subprocess.Popen(
                "ioreg -l | grep IOPlatformSerialNumber", 
                stdout=subprocess.PIPE, 
                shell=True
            ).communicate()[0]
            serial = output.decode().split('=', 1)[1].replace(' ', '')
            hwid = serial[1:-2]
            return hwid

#################start###############

# New banner in red
BANNER = fr"""
{Fore.RED}
___  ___          _
|  \/  |         | |
| .  . |_____ __ | | __ _ _   _
| |\/| |_  / '_ \| |/ _` | | | |
| |  | |/ /| |_) | | (_| | |_| |
\_|  |_/___| .__/|_|\__,_|\__, |
           | |             __/ |
           |_|            |___/
Made by TLG ï¼š @lucas8166363 
Mode {timesd}s
"""


# URL and headers
url = "https://mzplayapi.com/api/webapi/GetNoaverageEmerdList"
headers = {
    "accept": "application/json, text/plain, */*",
    "authorization": "Bearer <your-token>",
    "content-type": "application/json;charset=UTF-8",
    "origin": "https://mz159.com",
    "referer": "https://mz159.com/",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
}

def colorize_number(number, color):
    if "red" in color:
        return f"{Fore.RED}{number} {color}{Style.RESET_ALL}"
    elif "green" in color:
        return f"{Fore.GREEN}{number} {color}{Style.RESET_ALL}"
    elif "violet" in color:
        return f"{Fore.MAGENTA}{number} {color}{Style.RESET_ALL}"
    else:
        return f"{number} {color}"

def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

def countdown_timer(seconds):
    for remaining in range(seconds, 0, -1):
        print(f"{Fore.RED}Starting next request in {remaining} seconds...{Style.RESET_ALL}", end="\r")
        time.sleep(1)
    print("\n")

def getchecksum():
    md5_hash = hashlib.md5()
    file = open(''.join(sys.argv), "rb")
    md5_hash.update(file.read())
    digest = md5_hash.hexdigest()
    return digest

keyauthapp = api(
    name = "WingoHack", # App name
    ownerid = "FssVxywpII", # Account ID
    version = "1.0", # Application version. Used for automatic downloads see video here https://www.youtube.com/watch?v=kW195PLCBKs
    hash_to_check = getchecksum()
)

def new_method(all_numbers):
    global size
    triplet = int("".join(map(str, all_numbers[:3])))

    triplet_mod_9 = sum(int(digit) for digit in str(triplet))
    while triplet_mod_9 > 9:
        triplet_mod_9 = sum(int(digit) for digit in str(triplet_mod_9))
    triplet_x2 = triplet_mod_9 * 2
    final_result = triplet_x2 % 10

    if final_result < 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {final_result}"
    elif final_result == 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {final_result}"
    else:
        size = "( BIG )"
        final = f"{random.randint(5, 9)}, {final_result}"

    print(f"{Fore.YELLOW}result: {final} might be {size}{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}win: {win}, lose: {lose}{Style.RESET_ALL}")

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

def fast_seconds_until_next_interval(interval_seconds=60):
    current_time = datetime.utcnow()# Use UTC for speed
    current_seconds = current_time.second
    current_microseconds = current_time.microsecond
    seconds_until_next_interval = interval_seconds - (current_seconds % interval_seconds) - (1 if current_microseconds > 0 else 0)
    return seconds_until_next_interval


#main loop
def main():
    global onemin
    global firsttime
    global win
    global lose
    try:
        while True:
            if onemin == True:
                nig = fast_seconds_until_next_interval(64)
                data = {
                    "pageSize": 10,
                    "pageNo": 1,
                    "typeId": 1,
                    "language": 0,
                    "random": "ab914e8fb85b4982bc8597bae4d2957e",
                    "signature": "9D021D1E641106DD2340C93B510AF34B",
                    "timestamp": 1734222242
                }
                timesd = 60
            else:
                nig = fast_seconds_until_next_interval(34)
                data = {
                    "pageSize": 10,
                    "pageNo": 1,
                    "typeId": 30,
                    "language": 0,
                    "random": "6a222fba72804178a73b14ea3608f882",
                    "signature": "0AC1D24B772F82131E80F8F812F6647E",
                    "timestamp": 1734184938
                }
                timesd = 30

            clear_console()
            print(BANNER)
            response = requests.post(url, headers=headers, data=json.dumps(data))

            if response.status_code == 200:
                items = response.json()["data"]["list"]
                all_numbers = []  # Reset numbers for each iteration
                for item in items:
                    number = item["number"]
                    color = item["colour"]
                    print(colorize_number(number, color))
                    all_numbers.append(number)  # Append the number to the list

                if not firsttime:
                    if int(all_numbers[0]) < 4:
                        latest = "( SMALL )"
                    else:
                        latest = "( BIG )"

                    if latest == size:
                        win = win + 1
                    else:
                        lose = lose + 1
                else:
                    win = 0
                    lose = 0

                firsttime = False

                new_method(all_numbers)

                countdown_timer(nig)

            else:
                print(f"Request failed with status code: {response.status_code}")
                break

    except KeyboardInterrupt:
        print("\nStopped by user")  # Fixed indentation here
        sys.exit()

if autolog == True:
    main()
else:
    key = input('Enter your license: ')
    keyauthapp.license(key)
    if platform.system() == "Linux":
        with open(license_file_path, "w") as file:
            file.write(key)
    else:
        with open(lpath, "w") as file:
            file.write(key)

main()
'''
exec(base64.b64decode(encoded_script).decode('utf-8'))
