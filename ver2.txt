from sys import platform
import os
import sys
import platform
import requests
import json as jsond
import time
from colorama import Fore, Style, init
import hashlib
from datetime import datetime, timedelta
from discord_interactions import verify_key
import platform
import json
import statistics
import subprocess
from datetime import datetime, timedelta
import pytz
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import time

chang = 0

if platform.system() == "Linux":
    userpath = "/data/data/com.termux/files/home/MzAccount.txt"
else:
    userpath = "MzAccount.txt"

if os.path.exists(userpath) and os.path.getsize(userpath) > 0:
    with open(userpath, "r") as file:
        phonenum, password = file.read().splitlines()
else:
    phonenum = input("Phone Number : 60+ ")
    password = input("Password: ")
    with open(userpath, "w") as file:
        file.write(f"{phonenum}\n{password}")

autolog = False
license_file_path = "/data/data/com.termux/files/home/.license.txt"
if platform.system() == "Linux":
    if os.path.exists(license_file_path):
        with open(license_file_path, "r") as file:
            license = file.read()
            if not license == None:
                autolog = True
    else:
        autolog = False
else:
    gpath = os.getenv('APPDATA')
    lpath = os.path.join(gpath, 'license.txt')
    if os.path.exists(lpath):
        with open(lpath, "r") as file:
            license = file.read()
            if not license == None:
                autolog = True

init(autoreset=True)
BANNERh = fr"""
{Fore.RED}
___  ___          _
|  \/  |         | |
| .  . |_____ __ | | __ _ _   _
| |\/| |_  / '_ \| |/ _` | | | |
| |  | |/ /| |_) | | (_| | |_| |
\_|  |_/___| .__/|_|\__,_|\__, |
           | |             __/ |
           |_|            |___/
Made by TLG ï¼š @lucas8166363 {Fore.RESET}

"""
ver = "#1.0"
timezone = 'Asia/Kuala_Lumpur'
onemin = True
firsttime = True
test = None
autobet = False 
print(BANNERh)

user_input = input(f" Y = 30S ### N = 1M [Y/N] ")
if user_input.lower() == "y":
    onemin = False

if onemin == True:
    data = {"pageSize":10,"pageNo":1,"typeId":1,"language":0,"random":"ab914e8fb85b4982bc8597bae4d2957e","signature":"9D021D1E641106DD2340C93B510AF34B","timestamp":1734222242}
    timesd = 60

else:
    data = {"pageSize": 10,"pageNo": 1,"typeId": 30,"language": 0,"random": "6a222fba72804178a73b14ea3608f882","signature": "0AC1D24B772F82131E80F8F812F6647E","timestamp": 1734184938}
    timesd = 30

user_input = input(f"AutoBet? [Y/N]")
if user_input.lower() == "y":
    autobet = True 
else:
    autobet = False

betamount = int(input(f"betamount: "))

# keyauth initialization
class api:
    name = ownerid = version = hash_to_check = ""

    def __init__(self, name, ownerid, version, hash_to_check):
        if len(ownerid) != 10:
            print("Visit https://keyauth.cc/app/, copy Python code, and replace code in main.py with that")
            time.sleep(3)
            os._exit(1)

        self.name = name
        self.ownerid = ownerid
        self.version = version
        self.hash_to_check = hash_to_check
        self.init()

    sessionid = enckey = ""
    initialized = False

    def init(self):
        if self.sessionid != "":
            print("You've already initialized!")
            time.sleep(3)
            os._exit(1)

        post_data = {
            "type": "init",
            "ver": self.version,
            "hash": self.hash_to_check,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        if response == "KeyAuth_Invalid":
            print("The application doesn't exist")
            time.sleep(3)
            os._exit(1)

        json = jsond.loads(response)

        if json["message"] == "invalidver":
            if json["download"] != "":
                print("New Version Available")
                download_link = json["download"]
                os.system(f"start {download_link}")
                time.sleep(3)
                os._exit(1)
            else:
                print("Invalid Version, Contact owner to add download link to latest app version")
                time.sleep(3)
                os._exit(1)

        if not json["success"]:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

        self.sessionid = json["sessionid"]
        self.initialized = True


    def __load_user_data(self, data):
        self.user_data.username = data["username"]
        self.user_data.ip = data["ip"]
        self.user_data.hwid = data["hwid"] or "N/A"
        self.user_data.expires = data["subscriptions"][0]["expiry"]
        self.user_data.createdate = data["createdate"]
        self.user_data.lastlogin = data["lastlogin"]
        self.user_data.subscription = data["subscriptions"][0]["subscription"]
        self.user_data.subscriptions = data["subscriptions"]

    class application_data_class:
        numUsers = numKeys = app_ver = customer_panel = onlineUsers = ""

    class user_data_class:
        username = ip = hwid = expires = createdate = lastlogin = subscription = subscriptions = ""

    user_data = user_data_class()
    app_data = application_data_class()

    def __load_app_data(self, data):
        self.app_data.onlineUsers = data["numOnlineUsers"]

    def __do_request(self, post_data):
        try:
            response = requests.post(
            "https://keyauth.win/api/1.3/", data=post_data, timeout=10
            )

            if post_data["type"] == "log" or post_data["type"] == "file":
                return response.text

            # Get the signature and timestamp from the headers
            signature = response.headers.get("x-signature-ed25519")
            timestamp = response.headers.get("x-signature-timestamp")

            if not signature or not timestamp:
                print("Missing headers for signature verification.")
                time.sleep(3)
                os._exit(1)

            server_time = datetime.utcfromtimestamp(int(timestamp))
            current_time = datetime.utcnow()

            buffer_seconds = 5
            time_difference = current_time - server_time

            if time_difference > timedelta(seconds=20 + buffer_seconds):
                print("Timestamp is too old (exceeded 20 seconds + buffer).")
                time.sleep(3)
                os._exit(1)

            # Proceed with creating debug folders and logging##################might error

            if not verify_key(response.text.encode('utf-8'), signature, timestamp, '5586b4bc69c7a4b487e4563a4cd96afd39140f919bd31cea7d1c6a1e8439422b'):
                print("Signature checksum failed. Request was tampered with or session ended most likely.")
                print("Response: " + response.text)
                time.sleep(3)
                os._exit(1)

            return response.text

        except requests.exceptions.Timeout:
            print("Request timed out. Server is probably down/slow at the moment")

    def license(self, key, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()

        post_data = {
            "type": "license",
            "key": key,
            "hwid": hwid,
            "sessionid": self.sessionid,
            "name": self.name,
            "ownerid": self.ownerid
        }

        response = self.__do_request(post_data)

        json = jsond.loads(response)

        if json["success"]:
            self.__load_user_data(json["info"])
            print(json["message"])
        else:
            print(json["message"])
            time.sleep(3)
            os._exit(1)

    def checkinit(self):
        if not self.initialized:
            print("Initialize first, in order to use the functions")
            time.sleep(3)
            os._exit(1)
            
            
def generate_random_uuid():
    return ''.join(random.choices('0123456789abcdef', k=32))

class others:
    @staticmethod
    def get_hwid():
        if platform.system() == "Linux":
            file_path = "/data/data/com.termux/files/home/.md"

            if os.path.exists(file_path):
                if os.stat(file_path).st_size == 0:
                    hwid = generate_random_uuid()
                    with open(file_path, 'w') as f:
                        f.write(hwid)
                else:
                    with open(file_path, 'r') as f:
                        hwid = f.read().strip()
            else:
                hwid = generate_random_uuid()
                with open(file_path, 'w') as f:
                    f.write(hwid)

            if not os.access(__file__, os.W_OK):
                os.system(f"chmod +x {__file__}")
            if hwid is None:
                print("Error occurred, exiting...")
                sys.exit()

            return hwid

        elif platform.system() == "Windows":
            winuser = os.getlogin()
            sid = win32security.LookupAccountName(None, winuser)[0]
            hwid = win32security.ConvertSidToStringSid(sid)
            return hwid

        elif platform.system() == "Darwin":
            output = subprocess.Popen(
                "ioreg -l | grep IOPlatformSerialNumber", 
                stdout=subprocess.PIPE, 
                shell=True
            ).communicate()[0]
            serial = output.decode().split('=', 1)[1].replace(' ', '')
            hwid = serial[1:-2]
            return hwid

#################start###############

# New banner in red
BANNER = fr"""
{Fore.RED}
___  ___          _
|  \/  |         | |
| .  . |_____ __ | | __ _ _   _
| |\/| |_  / '_ \| |/ _` | | | |
| |  | |/ /| |_) | | (_| | |_| |
\_|  |_/___| .__/|_|\__,_|\__, |
           | |             __/ |
           |_|            |___/
Made by TLG ï¼š @lucas8166363 
Mode {timesd}s
"""


# URL and headers
url = "https://mzplayapi.com/api/webapi/GetNoaverageEmerdList"
headers = {
    "accept": "application/json, text/plain, */*",
    "authorization": "Bearer <your-token>",
    "content-type": "application/json;charset=UTF-8",
    "origin": "https://mz159.com",
    "referer": "https://mz159.com/",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
}

def colorize_number(number, color):
    if "red" in color:
        return f"{Fore.RED}{number} {color}{Style.RESET_ALL}"
    elif "green" in color:
        return f"{Fore.GREEN}{number} {color}{Style.RESET_ALL}"
    elif "violet" in color:
        return f"{Fore.MAGENTA}{number} {color}{Style.RESET_ALL}"
    else:
        return f"{number} {color}"

def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

def countdown_timer(seconds):
    for remaining in range(seconds, 0, -1):
        print(f"{Fore.RED}Starting next request in {remaining} seconds...{Style.RESET_ALL}", end="\r")
        time.sleep(1)
    print("\n")

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import time

clicks = betamount - 1

def read_credentials(file_path):
    """Read credentials from a file."""
    with open(file_path, 'r') as file:
        lines = file.readlines()
        phone_number = lines[0].strip()  # First line for the phone number
        password = lines[1].strip()     # Second line for the password
    return phone_number, password

def auto_login():
    try: 
        # Read credentials from file
        phone_number = phonenum

        # Initialize the WebDriver
        options = webdriver.ChromeOptions()
        driver = webdriver.Chrome(options=options)

        # Set viewport size
        driver.set_window_size(508, 953)

        # Navigate to the URL
        url = "https://mz159.com/#/login"
        driver.get(url)
        time.sleep(1)  # Wait for the page to load

       # Perform actions step by step

        # Step 1: Click on the phone number input field
        phone_input = driver.find_element(By.CSS_SELECTOR, "div.phoneInput__container input")
        phone_input.click()
        time.sleep(1)  # Wait for the page to load

        # Step 2: Enter phone number
        phone_input.send_keys(phone_number)
        
        # Step 3: Click on the password input field
        password_input = driver.find_element(By.CSS_SELECTOR, "div.activecontent div.passwordInput__container input")
        password_input.click()
        # Step 4: Enter password
        password_input.send_keys(password)

        # Step 5: Click the login button
        login_button = driver.find_element(By.CSS_SELECTOR, "button.active")
        login_button.click()
        time.sleep(1)  # Wait for the page to load

        # Step 6: Confirm prompt
        confirm_button = driver.find_element(By.CSS_SELECTOR, "div.promptBtn")
        confirm_button.click()
        time.sleep(1)  # Wait for the page to load

        # Step 7: Select the lottery
        lottery_image = driver.find_element(By.CSS_SELECTOR, "div.home_container > div > div:nth-of-type(1) img.lottery_bg")
        lottery_image.click()        
        time.sleep(1)  # Wait for the page to load
        # Return the driver instance to be reused
        return driver
    except:
        pass

autobet = True

def automate_taskB(driver):
    try: 
        time.sleep(1) 
        betting_footer = driver.find_element(By.CSS_SELECTOR, "div.Betting__C-foot-b")
        betting_footer.click()
        time.sleep(1)  

        bet_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-body > div:nth-of-type(2) div:nth-of-type(3)")
        for _ in range(clicks):
            bet_amount_button.click()
            time.sleep(0.2)


        total_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-foot-s")
        total_amount_button.click()
    except:
        pass

autobet = True

def automate_taskS(driver):
    try: 
        time.sleep(1)  # Wait for the page to load
        # Step 8: Click the betting footer
        betting_footer = driver.find_element(By.CSS_SELECTOR, "div.Betting__C-foot-s")
        betting_footer.click()
        time.sleep(1)  # Wait for the page to load


        bet_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-body > div:nth-of-type(2) div:nth-of-type(3)")
        for _ in range(clicks):
            bet_amount_button.click()
            time.sleep(0.2)



        total_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-foot-s")
        total_amount_button.click()
    except:
        pass

autobet = True

def automate_taskSv2(driver):
    try: 
        win_go_button = driver.find_element(By.CSS_SELECTOR, "div.GameList__C > div:nth-of-type(2) > div")
        win_go_button.click()
        betting_footer = driver.find_element(By.CSS_SELECTOR, "div.Betting__C-foot-s")
        betting_footer.click()
        time.sleep(1)  #

        bet_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-body > div:nth-of-type(2) div:nth-of-type(3)")
        for _ in range(clicks):
            bet_amount_button.click()
            time.sleep(0.2)


        total_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-foot-s")
        total_amount_button.click()
        time.sleep(3)  

    except:
        pass

autobet = True

def automate_taskBv2(driver):
    try:
        win_go_button = driver.find_element(By.CSS_SELECTOR, "div.GameList__C > div:nth-of-type(2) > div")
        win_go_button.click()
        betting_footer = driver.find_element(By.CSS_SELECTOR, "div.Betting__C-foot-b")
        betting_footer.click()
        time.sleep(1)  


        bet_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-body > div:nth-of-type(2) div:nth-of-type(3)")
        for _ in range(clicks):
            bet_amount_button.click()
            time.sleep(0.2)


        total_amount_button = driver.find_element(By.CSS_SELECTOR, "div.Betting__Popup-foot-s")
        total_amount_button.click()
        time.sleep(1)  

    except:
        pass

autobet = True

driver = auto_login()

def getchecksum():
    md5_hash = hashlib.md5()
    file = open(''.join(sys.argv), "rb")
    md5_hash.update(file.read())
    digest = md5_hash.hexdigest()
    return digest

keyauthapp = api(
    name = "WingoHack", # App name
    ownerid = "FssVxywpII", # Account ID
    version = "1.0", # Application version. Used for automatic downloads see video here https://www.youtube.com/watch?v=kW195PLCBKs
    hash_to_check = getchecksum()
)

def new_method(all_numbers):
    global size
    final_result = (((((int(all_numbers[0]) + int(all_numbers[1]) + int(all_numbers[2])) - 
                   ((int(all_numbers[0]) + int(all_numbers[1]) + int(all_numbers[2])) % 10)) / 10) + 
                  ((int(all_numbers[0]) + int(all_numbers[1]) + int(all_numbers[2])) % 10)) * 2) % 10

    if int(final_result) < 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    elif int(final_result) == 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    else:
        size = "( BIG )"
        final = f"{random.randint(5, 9)}, {int(final_result)}"

    print(f"{Fore.YELLOW}result: {final} might be {size}{Style.RESET_ALL}")

    if autobet == True:
        if onemin == False:
            if size == "( BIG )":
                automate_taskB(driver)
            else:
                automate_taskS(driver)
        else:       
            if size == "( BIG )":
                automate_taskBv2(driver)
            else:
                automate_taskSv2(driver)

def new_methodv3(all_numbers):
    global size
    final_result = (
    (
        (
            int(all_numbers[0]) 
            + int(all_numbers[1]) 
            + int(all_numbers[2]) 
            + int(all_numbers[3])
        ) 
        - (
            (int(all_numbers[0]) 
            + int(all_numbers[1]) 
            + int(all_numbers[2]) 
            + int(all_numbers[3])) % 10
        )
    ) / 10
    + (
        (int(all_numbers[0]) 
        + int(all_numbers[1]) 
        + int(all_numbers[2]) 
        + int(all_numbers[3])) % 10
    )
    * 2
) % 10
    if int(final_result) < 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    elif int(final_result) == 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    else:
        size = "( BIG )"
        final = f"{random.randint(5, 9)}, {int(final_result)}"

    print(f"{Fore.YELLOW}result: {final} might be {size}{Style.RESET_ALL}")

    if autobet == True:
        if onemin == False:
            if size == "( BIG )":
                automate_taskB(driver)
            else:
                automate_taskS(driver)
        else:       
            if size == "( BIG )":
                automate_taskBv2(driver)
            else:
                automate_taskSv2(driver)

def new_methodv2(all_numbers):
    global size
    final_result = (
    (
        (
            (
                int(all_numbers[0])
                + int(all_numbers[1])
                + int(all_numbers[2])
                + int(all_numbers[3])
                + int(all_numbers[4])
                + int(all_numbers[5])
                + int(all_numbers[6])
                + int(all_numbers[7])
                + int(all_numbers[8])
                + int(all_numbers[9])
            )
            - (
                (
                    int(all_numbers[0])
                    + int(all_numbers[1])
                    + int(all_numbers[2])
                    + int(all_numbers[3])
                    + int(all_numbers[4])
                    + int(all_numbers[5])
                    + int(all_numbers[6])
                    + int(all_numbers[7])
                    + int(all_numbers[8])
                    + int(all_numbers[9])
                )
                // 9
            )
        )
        + (
            (
                int(all_numbers[0])
                + int(all_numbers[1])
                + int(all_numbers[2])
            )
            % 10
        )
        * 2
    )
    % 10
)

    if int(final_result) < 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    elif int(final_result) == 4:
        size = "( SMALL )"
        final = f"{random.randint(0, 4)}, {int(final_result)}"
    else:
        size = "( BIG )"
        final = f"{random.randint(5, 9)}, {int(final_result)}"

    print(f"{Fore.YELLOW}result: {final} might be {size}{Style.RESET_ALL}")

    if autobet == True:
        if onemin == False:
            if size == "( BIG )":
                automate_taskB(driver)
            else:
                automate_taskS(driver)
        else:       
            if size == "( BIG )":
                automate_taskBv2(driver)
            else:
                automate_taskSv2(driver)


def fast_seconds_until_next_interval(interval_seconds=60):
    kuala_lumpur_tz = pytz.timezone('Asia/Kuala_Lumpur')
    current_time = datetime.now(kuala_lumpur_tz)
    current_seconds = current_time.second
    current_microseconds = current_time.microsecond
    seconds_until_next_interval = interval_seconds - (current_seconds % interval_seconds) - (1 if current_microseconds > 0 else 0)
    return seconds_until_next_interval


# Main loop
def main():
    global onemin
    global firsttime
    global chang

    method_counter = 0  # Counter to alternate between V1, V2, and V3

    try:
        while True:
            time.sleep(1)
            if onemin:
                nig = fast_seconds_until_next_interval(60)
                data = {
                    "pageSize": 10,
                    "pageNo": 1,
                    "typeId": 1,
                    "language": 0,
                    "random": "ab914e8fb85b4982bc8597bae4d2957e",
                    "signature": "9D021D1E641106DD2340C93B510AF34B",
                    "timestamp": 1734222242
                }
                timesd = 60
            else:
                nig = fast_seconds_until_next_interval(30)
                data = {
                    "pageSize": 10,
                    "pageNo": 1,
                    "typeId": 30,
                    "language": 0,
                    "random": "6a222fba72804178a73b14ea3608f882",
                    "signature": "0AC1D24B772F82131E80F8F812F6647E",
                    "timestamp": 1734184938
                }
                timesd = 30

            clear_console()
            print(BANNER)
            response = requests.post(url, headers=headers, data=json.dumps(data))

            if response.status_code == 200:
                items = response.json()["data"]["list"]
                all_numbers = []  # Reset numbers for each iteration
                for item in items:
                    number = item["number"]
                    color = item["colour"]
                    print(colorize_number(number, color))
                    all_numbers.append(number)  # Append the number to the list



                if method_counter % 3 == 0:
                    print(Fore.YELLOW + "Running V1......")
                    new_methodv2(all_numbers)
                elif method_counter % 3 == 1:
                    print(Fore.YELLOW + "Running V2......")
                    new_method(all_numbers)
                else:
                    print(Fore.YELLOW + "Running V3......")
                    new_methodv3(all_numbers)

                method_counter += 1

                countdown_timer(nig)

                if autobet == True:
                    try:
                        time.sleep(8)
                        close_result_button = driver.find_element(By.CSS_SELECTOR, "div.closeBtn")
                        close_result_button.click()
                    except:
                        pass
                else: 
                    main()
            else:
                print(f"Request failed with status code: {response.status_code}")
                break

    except KeyboardInterrupt:
        print("Current setting:\n  license: {license}\n  phone number: {phonenum}  \n  password: {password}")
        setting = input("CTRL + C is detected configure setting? [y/n] (no is default) ")
        if setting.lower() == y:
            license = input("license: ")
            phonenum = input("phone number: ")
            password = input("password: ") 
            with open(userpath, "w") as file:
                file.write(f"{phonenum}\n{password}")
            with open(license_file_path, "w") as file:
                file.write(license)
            main()
        else:
            print("\nStopped by user")
            sys.exit()
        


if autolog:
    main()
else:
    key = input('Enter your license: ')
    keyauthapp.license(key)
    if platform.system() == "Linux":
        with open(license_file_path, "w") as file:
            file.write(key)
    else:
        with open(lpath, "w") as file:
            file.write(key)

main()
